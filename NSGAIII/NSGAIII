clc;
clear;
close all;

path= 'data\';
D = dir(fullfile(path,'*.mat'));

for dd = 1: length(D)
    
    load(fullfile(path,D(dd).name));
    
    fp = fopen(['result\',D(dd).name,'.txt'],'wt');
    
    sumObj = zeros(1,4);
    MaxIter = 30;
    
    for iter = 1:MaxIter
        fprintf(fp, '%d:\n', iter);
        
        global suRED suREL NP
        
        fea = normalizeData(fea);
        dim=size(fea,2);
        if dim>200
            [features,weights] = MI(fea,gnd,12);
            fea1=fea(:,features(1:200));
        else
            fea1=fea;
        end
        
        [suRED,suREL] = computeRelevanceRedundancy(fea1,gnd);
        NP=size(fea1,1);
        
        nVar = size(fea1,2);
        
        VarMin = -4;
        VarMax = 4;
        VarSize = [1 nVar];
        
        % Generating Reference Points
        nDivision = 10;
        Zr = GenerateReferencePoints(4, nDivision);
        
        MaxIt = 1000;  % Maximum Number of Iterations
        
        nPop = 100;  % Population Size
        
        pCrossover = 0.5;       % Crossover Percentage
        nCrossover = 2*round(pCrossover*nPop/2); % Number of Parnets (Offsprings)
        
        pMutation = 0.5;       % Mutation Percentage
        nMutation = round(pMutation*nPop);  % Number of Mutants
        
        mu = 0.01;     % Mutation Rate
        
        sigma = 0.1*(VarMax-VarMin); % Mutation Step Size
        
        
        %% Colect Parameters
        
        params.nPop = nPop;
        params.Zr = Zr;
        params.nZr = size(Zr,2);
        params.zmin = [];
        params.zmax = [];
        params.smin = [];
        
        %% Initialization
        
        % disp('Staring NSGA-III ...');
        
        empty_individual.Position = [];
        empty_individual.Cost = [];
        empty_individual.Label = [];
        empty_individual.Rank = [];
        empty_individual.DominationSet = [];
        empty_individual.DominatedCount = [];
        empty_individual.NormalizedCost = [];
        empty_individual.AssociatedRef = [];
        empty_individual.DistanceToAssociatedRef = [];
        
        pop = repmat(empty_individual, nPop, 1);
        
        for i = 1:nPop
            pop(i).Position = unifrnd(VarMin, VarMax, VarSize);
            [Ccost,label] = evaluate(pop(i).Position,fea1,gnd);
            pop(i).Cost = Ccost;
            pop(i).Label = label;
        end
        
        % Sort Population and Perform Selection
        [pop, F, params] = SortAndSelectPopulation(pop, params);
        
        FES = 0;
        flag = 0;
        
        while FES < MaxIt
            FES
            if flag == 1
                flag = 0;
                break;
            end
            
            % Crossover
            popc = repmat(empty_individual, nCrossover/2, 2);
            for k = 1:nCrossover/2
                
                i1 = randi([1 nPop]);
                p1 = pop(i1);
                
                i2 = randi([1 nPop]);
                p2 = pop(i2);
                
                [popc(k, 1).Position, popc(k, 2).Position] = Crossover(p1.Position, p2.Position);
                
                [popc(k, 1).Cost,popc(k, 1).Label] = evaluate(popc(k, 1).Position,fea1,gnd);
                FES = FES + 1;
                [popc(k, 2).Cost,popc(k, 2).Label] = evaluate(popc(k, 2).Position,fea1,gnd);
                FES = FES + 1;
                if FES > MaxIt
                    flag = 1;
                    break;
                end
            end
            popc = popc(:);
            
            % Mutation
            popm = repmat(empty_individual, nMutation, 1);
            for k = 1:nMutation
                
                i = randi([1 nPop]);
                p = pop(i);
                
                popm(k).Position = Mutate(p.Position, mu, sigma);
                
                [popm(k).Cost,popm(k).Label] = evaluate(popm(k).Position,fea1,gnd);
                FES = FES + 1;
                if FES > MaxIt
                    flag = 1;
                    break;
                end
            end
            
            % Merge
            pop = [pop
                popc
                popm]; %#ok
            
            % Sort Population and Perform Selection
            [pop, F, params] = SortAndSelectPopulation(pop, params);
            
            % Store F1
            F1 = pop(F{1});
            
        end
        
        lastCost = zeros(numel(F1),4);
        
        for i = 1:numel(F1)
            lastCost(i,:) = F1(i).Cost';
        end
        lastCost
        [result, index] = sort(lastCost(:,3));
        obj = lastCost(index(1),:);
        sumObj = sumObj + obj;
        
        lastLabel = F1(index(1)).Label';
        [~,~,Rn, NMI] = exMeasure(lastLabel,gnd);
        [micro, macro] = micro_macro_PR(lastLabel,gnd);
        
        lastRn(iter) = Rn;
        lastNMI(iter) = NMI;
        lastmicro_P(iter) = micro.precision;
        lastmicro_R(iter) = micro.recall;
        lastmicro_F(iter) = micro.fscore;
        lastmacro_P(iter) = macro.precision;
        lastmacro_R(iter) = macro.recall;
        lastmacro_F(iter) = macro.recall;
        
    end
    
    average = sumObj/MaxIter;
    finalresult(dd,1) = sum(lastRn)/MaxIter;
    finalresult(dd,2) = sum(lastNMI)/MaxIter;
    finalresult(dd,3) = -average(3);
    finalresult(dd,4) = sum(lastmicro_P)/MaxIter;
    finalresult(dd,5) = sum(lastmicro_R)/MaxIter;
    finalresult(dd,6) = sum(lastmicro_F)/MaxIter;
    finalresult(dd,7) = sum(lastmacro_P)/MaxIter;
    finalresult(dd,8) = sum(lastmacro_R)/MaxIter;
    finalresult(dd,9) = sum(lastmacro_F)/MaxIter;
    finalresult
    
    fprintf(fp, 'AverRn = %f AverNMI = %f AverAcc = %f Avermicro_P = %f Avermicro_R = %f Avermicro_F = %f Avermacro_P = %f Avermacro_R = %f Avermacro_F = %f\n', ...
        finalresult(dd,1), finalresult(dd,2), finalresult(dd,3), finalresult(dd,4), finalresult(dd,5), ...
        finalresult(dd,6), finalresult(dd,7), finalresult(dd,8), finalresult(dd,9));
    fclose(fp);
end
%dlmwrite(['result.csv' ],finalresult, 'precision', 4, 'newline', 'pc');
